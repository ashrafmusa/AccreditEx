

// This file was regenerated by the AI to define all necessary types for the application.

export type Language = 'en' | 'ar';
export type Direction = 'ltr' | 'rtl';
export type Theme = 'light' | 'dark';

export interface LocalizedString {
  en: string;
  ar: string;
}

export enum UserRole {
  Admin = 'Admin',
  ProjectLead = 'ProjectLead',
  TeamMember = 'TeamMember',
  Auditor = 'Auditor',
}

export enum ProjectStatus {
  NotStarted = 'Not Started',
  InProgress = 'In Progress',
  OnHold = 'On Hold',
  Completed = 'Completed',
  Finalized = 'Finalized',
}

export enum ComplianceStatus {
  Compliant = 'Compliant',
  PartiallyCompliant = 'Partially Compliant',
  NonCompliant = 'Non-Compliant',
  NotApplicable = 'Not Applicable',
}

export enum StandardCriticality {
  High = 'High',
  Medium = 'Medium',
  Low = 'Low',
}

export interface Comment {
  id: string;
  userId: string;
  userName: string;
  timestamp: string;
  text: string;
}

export interface UserCompetency {
  competencyId: string;
  issueDate: string;
  expiryDate?: string;
  evidenceDocumentId?: string;
}

export interface UserTrainingAssignment {
  trainingId: string;
  assignedDate: string;
  dueDate?: string;
}

export interface User {
  id: string;
  name: string;
  email: string;
  password?: string;
  role: UserRole;
  departmentId?: string;
  jobTitle?: string;
  hireDate?: string;
  competencies: UserCompetency[];
  trainingAssignments: UserTrainingAssignment[];
  readAndAcknowledge?: { documentId: string; acknowledgedDate?: string }[];
}

export interface ChecklistItem {
  id: string;
  item: string;
  standardId: string;
  status: ComplianceStatus;
  assignedTo: string | null;
  dueDate: string | null;
  actionPlan: string;
  notes: string;
  evidenceFiles: string[];
  comments: Comment[];
  linkedFhirResources?: { resourceType: string; resourceId: string; displayText: string }[];
}

export interface ActivityLogItem {
  id: string;
  timestamp: string;
  user: string;
  action: LocalizedString;
  details?: LocalizedString;
}

export interface MockSurveyResult {
    checklistItemId: string;
    result: 'Pass' | 'Fail' | 'Not Applicable';
    notes: string;
}

export interface MockSurvey {
    id: string;
    date: string;
    surveyorId: string;
    status: 'In Progress' | 'Completed';
    results: MockSurveyResult[];
    finalScore?: number;
}

export interface CAPAReport {
    id: string;
    status: 'Open' | 'Closed';
    type: 'Corrective' | 'Preventive';
    sourceProjectId: string;
    sourceChecklistItemId?: string;
    sourceStandardId?: string;
    sourceIncidentId?: string;
    description: string;
    rootCauseAnalysis: string;
    rootCauseCategory?: string;
    trainingRecommendationId?: string;
    actionPlan: string;
    assignedTo: string | null;
    dueDate: string;
    createdAt: string;
    effectivenessCheck?: {
        required: boolean;
        dueDate: string;
        completed: boolean;
        notes: string;
    };
}

export interface DesignControlItem {
    id: string;
    userNeed: string;
    designInput: string;
    designOutput: string;
    verification: string;
    validation: string;
    linkedDocumentIds: string[];
}

export interface Project {
  id: string;
  name: string;
  description: string;
  programId: string;
  startDate: string;
  endDate: string | null;
  projectLead: User;
  status: ProjectStatus;
  progress: number;
  checklist: ChecklistItem[];
  activityLog: ActivityLogItem[];
  mockSurveys: MockSurvey[];
  capaReports: CAPAReport[];
  designControls: DesignControlItem[];
  finalizedBy?: string;
  finalizationDate?: string;
}

export interface SubStandard {
    id: string;
    description: string;
}

export interface Standard {
  programId: string;
  standardId: string;
  description: string;
  section?: string;
  totalMeasures?: number;
  criticality?: StandardCriticality;
  subStandards?: SubStandard[];
}

export interface AppDocument {
  id: string;
  name: LocalizedString;
  type: 'Policy' | 'Procedure' | 'Evidence' | 'Report' | 'Process Map';
  isControlled: boolean;
  status: 'Draft' | 'Pending Review' | 'Approved' | 'Rejected' | 'Archived';
  content: LocalizedString;
  processMapContent?: { nodes: ProcessNode[], edges: ProcessEdge[] };
  currentVersion: number;
  versionHistory: {
    version: number;
    date: string;
    uploadedBy: string;
    content: any;
  }[];
  uploadedAt: string;
  reviewDate?: string;
  approvedBy?: string;
  approvalDate?: string;
}

export interface ProcessNode {
    id: string;
    type: 'start' | 'process' | 'decision' | 'end';
    text: string;
    position: { x: number; y: number };
}

export interface ProcessEdge {
    id: string;
    source: string;
    target: string;
}

export interface Department {
  id: string;
  name: LocalizedString;
  requiredCompetencyIds?: string[];
}

export interface TrainingProgram {
  id: string;
  title: LocalizedString;
  description: LocalizedString;
  content: LocalizedString;
  passingScore: number;
  quiz: {
    id: string;
    question: LocalizedString;
    options: LocalizedString[];
    correctOptionIndex: number;
  }[];
}

export interface CertificateData {
  id: string;
  userId: string;
  userName: string;
  trainingId: string;
  trainingTitle: LocalizedString;
  completionDate: string;
  score: number;
}

export interface AccreditationProgram {
  id: string;
  name: string;
  description: LocalizedString;
}

export interface CustomCalendarEvent {
  id: string;
  type: 'Custom';
  date: string;
  title: LocalizedString;
  description?: LocalizedString;
}

export interface Notification {
  id: string;
  userId: string;
  message: LocalizedString;
  link: NavigationState;
  timestamp: string;
  read: boolean;
}

export interface GlobeSettings {
  baseColor: string;
  markerColor: string;
  glowColor: string;
  scale: number;
  darkness: number;
  lightIntensity: number;
  rotationSpeed: number;
}

export interface AppSettings {
  appName: string;
  logoUrl?: string;
  primaryColor: string;
  defaultLanguage: Language;
  defaultUserRole: UserRole;
  passwordPolicy: {
    minLength: number;
    requireUppercase: boolean;
    requireNumber: boolean;
    requireSymbol: boolean;
  };
  globeSettings: GlobeSettings;
}

export interface Competency {
  id: string;
  name: LocalizedString;
  description: LocalizedString;
}

export interface Risk {
  id: string;
  title: string;
  description: string;
  likelihood: number;
  impact: number;
  ownerId: string | null;
  status: 'Open' | 'Mitigated' | 'Closed';
  mitigationPlan: string;
  rootCauseCategory?: string;
  trainingRecommendationId?: string;
  createdAt: string;
}

export interface IncidentReport {
    id: string;
    incidentDate: string;
    location: string;
    type: 'Patient Safety' | 'Staff Injury' | 'Facility Issue' | 'Medication Error' | 'Other';
    severity: 'Minor' | 'Moderate' | 'Severe' | 'Sentinel Event';
    description: string;
    status: 'Open' | 'Under Investigation' | 'Closed';
    reportedBy: string;
    correctiveActionIds: string[];
}

export interface AuditPlan {
    id: string;
    name: string;
    projectId: string;
    standardSection: string; // e.g. 'Chapter 1' or specific standard IDs
    frequency: 'weekly' | 'monthly';
    itemCount: number; // number of checklist items to audit
    assignedAuditorId: string;
}

export interface AuditResult {
    checklistItemId: string;
    isCompliant: boolean;
    auditorNotes: string;
}
export interface Audit {
    id: string;
    planId: string;
    dateConducted: string;
    auditorId: string;
    results: AuditResult[];
}

export type UserTrainingStatus = {
    [trainingId: string]: {
        status: 'Not Started' | 'In Progress' | 'Completed';
        score?: number;
        completionDate?: string;
        certificateId?: string;
    }
};

export type SettingsSection = 'general' | 'profile' | 'security' | 'users' | 'accreditationHub' | 'competencies' | 'data' | 'about';

export type ProjectDetailView = 'overview' | 'checklist' | 'documents' | 'audit_log' | 'mock_surveys' | 'design_controls';

// FIX: Added 'auditLog' and 'designControls' to the NavigationState union type
export type NavigationState =
  | { view: 'dashboard' }
  | { view: 'analytics' }
  | { view: 'qualityInsights' }
  | { view: 'calendar' }
  | { view: 'risk' }
  | { view: 'auditHub' }
  | { view: 'documentControl' }
  | { view: 'dataHub' }
  | { view: 'projects' }
  | { view: 'projectDetail', projectId: string }
  | { view: 'createProject' }
  | { view: 'editProject', projectId: string }
  | { view: 'myTasks' }
  | { view: 'departments' }
  | { view: 'departmentDetail', departmentId: string }
  | { view: 'userProfile', userId: string }
  | { view: 'trainingHub' }
  | { view: 'trainingDetail', trainingId: string }
  | { view: 'certificate', certificateId: string }
  | { view: 'standards', programId: string }
  | { view: 'mockSurveyList' }
  | { view: 'mockSurvey', projectId: string, surveyId: string }
  | { view: 'surveyReport', projectId: string, surveyId: string }
  | { view: 'settings', section?: SettingsSection }
  | { view: 'auditLog' }
  | { view: 'designControls' };


export interface AIQualityBriefing {
  strengths: string[];
  concerns: string[];
  recommendations: {
    title: string;
    details: string;
  }[];
}

export type CalendarView = 'month' | 'agenda' | 'year';

export type CalendarEventType = 'Project' | 'Survey' | 'Document' | 'CAPA' | 'Custom';

export interface UnifiedEvent {
  id: string;
  type: CalendarEventType;
  date: string;
  title: string;
  description?: string;
  color: string;
  link: NavigationState;
}