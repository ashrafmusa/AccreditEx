// This file was generated by the AI to create a new Task Status Distribution chart.

import React, { useMemo } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Cell } from 'recharts';
import { ChecklistItem, ComplianceStatus } from '../../types';
import { useTranslation } from '../../hooks/useTranslation';
import { useTheme } from '../common/ThemeProvider';

interface Props {
  checklistItems: ChecklistItem[];
}

const TaskStatusDistributionChart: React.FC<Props> = ({ checklistItems }) => {
    const { t } = useTranslation();
    const { theme } = useTheme();
  
    const data = useMemo(() => {
        const statusCounts = checklistItems.reduce((acc, item) => {
            acc[item.status] = (acc[item.status] || 0) + 1;
            return acc;
        }, {} as Record<ComplianceStatus, number>);

        return Object.entries(statusCounts).map(([name, value]) => ({
            name: t((name.charAt(0).toLowerCase() + name.slice(1).replace(/\s/g, '')) as any),
            count: value,
        }));
    }, [checklistItems, t]);

    const COLORS: Record<string, string> = {
        [t('compliant')]: '#22c55e',
        [t('partiallyCompliant')]: '#f97316',
        [t('nonCompliant')]: '#ef4444',
        [t('notApplicable')]: '#6b7280',
    };

    const tickStyle = { fill: theme === 'dark' ? '#9CA3AF' : '#6B7280', fontSize: '0.75rem' };
    const tooltipStyle = {
      borderRadius: '0.5rem',
      background: theme === 'dark' ? 'rgba(15, 23, 42, 0.8)' : 'rgba(255, 255, 255, 0.8)',
      backdropFilter: 'blur(4px)',
      border: `1px solid ${theme === 'dark' ? '#1e293b' : '#e2e8f0'}`,
    };
  
    return (
      <div className="bg-brand-surface dark:bg-dark-brand-surface p-6 rounded-xl shadow-md border border-brand-border dark:border-dark-brand-border h-full flex flex-col">
        <h3 className="text-lg font-semibold mb-4 text-brand-text-primary dark:text-dark-brand-text-primary">{t('taskStatusDistribution')}</h3>
        {data.length > 0 ? (
            <div className="flex-grow min-h-0">
                <ResponsiveContainer width="100%" height="100%">
                    <BarChart data={data} layout="vertical" margin={{ top: 5, right: 20, left: 20, bottom: 5 }}>
                        <CartesianGrid strokeDasharray="3 3" stroke={theme === 'dark' ? 'rgba(128,128,128,0.1)' : 'rgba(128,128,128,0.2)'} horizontal={false}/>
                        <XAxis type="number" tick={tickStyle} />
                        <YAxis type="category" dataKey="name" width={80} tick={tickStyle} tickLine={false} />
                        <Tooltip contentStyle={tooltipStyle} cursor={{fill: theme === 'dark' ? 'rgba(148, 163, 184, 0.1)' : 'rgba(226, 232, 240, 0.4)'}}/>
                        <Bar dataKey="count" name={t('tasks')} barSize={20}>
                            {data.map((entry, index) => (
                                <Cell key={`cell-${index}`} fill={COLORS[entry.name] || '#8884d8'} />
                            ))}
                        </Bar>
                    </BarChart>
                </ResponsiveContainer>
            </div>
        ) : <div className="flex items-center justify-center flex-grow"><p className="text-brand-text-secondary dark:text-dark-brand-text-secondary">{t('noDataAvailable')}</p></div>}
      </div>
    );
  };

export default TaskStatusDistributionChart;